{"version":3,"file":"static/js/541.31daa3df.chunk.js","mappings":"wLAuBA,UAjBmC,SAACA,GAClC,IAAMC,GAAoBC,EAAAA,EAAAA,QAAuB,MACzCC,EAAyBH,EAAzBG,OAAWC,GAAnB,OAAiCJ,EAAjC,GACA,GAA0BK,EAAAA,EAAAA,UAAyB,MAAnD,eAAOC,EAAP,KAAcC,EAAd,KAWA,OAVAC,EAAAA,EAAAA,YAAU,WACR,GAAkC,OAA9BP,EAAkBQ,QAAtB,CACA,IAAMC,EAAOT,EAAkBQ,QAC/BF,GAASI,EAAAA,EAAAA,IAAKD,OACb,KAEHF,EAAAA,EAAAA,YAAU,WACHF,GACLA,EAAMM,UAAUT,KACf,CAACA,EAAQG,KACL,wBAAKO,IAAKZ,GAAuBG","sources":["components/ECharts.tsx"],"sourcesContent":["import React, {FC, useRef, useEffect, HTMLProps, useState} from 'react';\r\nimport {ECharts, EChartOption, init} from 'echarts';\r\n\r\ninterface IEchartsProps extends HTMLProps<HTMLDivElement>{\r\n  option: EChartOption\r\n}\r\nconst Echarts: FC<IEchartsProps> = (props) => {\r\n  const chartContainerRef = useRef<HTMLDivElement>(null);\r\n  const { option, ...restProps } = props;\r\n  const [chart, setChart] = useState<ECharts | null>(null);\r\n  useEffect(() => {\r\n    if (chartContainerRef.current === null) return;\r\n    const node = chartContainerRef.current;\r\n    setChart(init(node));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!chart) return;\r\n    chart.setOption(option);\r\n  }, [option, chart]);\r\n  return <div ref={chartContainerRef} {...restProps}/>;\r\n};\r\n\r\nexport default Echarts;"],"names":["props","chartContainerRef","useRef","option","restProps","useState","chart","setChart","useEffect","current","node","init","setOption","ref"],"sourceRoot":""}